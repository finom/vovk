<%- t.getFirstLineBanner() %>
import type { VovkFetcher } from 'vovk';
import { createRPC } from '<%= t.commonImports.module.createRPC %>';
import { schema } from './schema<%= t.nodeNextResolutionExt.ts %>';
import { openapi } from './openapi<%= t.nodeNextResolutionExt.ts %>';
<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => { if(segment.segmentType !== 'mixin') { %>
import type { Controllers as Controllers<%= i %> } from "<%= t.segmentMeta[segment.segmentName].segmentImportPath %>";
<% }
});
if (t.hasMixins) { %>
import type { Controllers as MixinControllers, Mixins } from "./mixins.d.ts";
<% } %>
<% Object.entries(t.reExports).forEach(([reExportWhat, reExportFrom]) => { %>
export { <%= reExportWhat %> } from '<%= reExportFrom %>';
<% }) %>   
<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => {   %>
  <% Object.keys(segment.controllers).forEach((rpcModuleName) => { %>
export const <%= rpcModuleName %> = createRPC<<%= segment.segmentType === 'mixin' ? `MixinControllers` : `Controllers${i}` %>["<%= rpcModuleName %>"], typeof import('<%- t.segmentImports[segment.segmentName].module.fetcher %>').fetcher extends VovkFetcher<infer U> ? U : never>(
  schema, '<%= segment.segmentName %>', '<%= rpcModuleName %>', import('<%- t.segmentImports[segment.segmentName].module.fetcher %>'),
  { validateOnClient: <%- t.segmentImports[segment.segmentName].module.validateOnClient ? `import('${t.segmentImports[segment.segmentName].validateOnClient}')` : 'undefined' %>, <%- typeof t.segmentMeta[segment.segmentName].segmentNameOverride === 'string' ? `segmentNameOverride: '${t.segmentMeta[segment.segmentName].segmentNameOverride}', ` : '' %><%- segment.segmentType === 'mixin' ? '' : `apiRoot: '${t.segmentMeta[segment.segmentName].forceApiRoot ?? t.apiRoot}'` %> }
);
<% }) 
}) %>
export { schema, openapi };
<% if (t.hasMixins) { %>
export { Mixins };
<% } %>