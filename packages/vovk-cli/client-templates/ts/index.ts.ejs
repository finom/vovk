<%- `// auto-generated by Vovk.ts ${new Date().toISOString()}` %>
import type { VovkClientFetcher } from 'vovk';
import { fetcher } from '<%= t.imports.fetcher %>';
import { createRPC } from '<%= t.imports.createRPC %>';
import { schema } from './schema<%= t.nodeNextResolutionExt.ts %>';
<% if(t.isTsStandalone) { %>
import type {
  <% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => { %>
    Segment<%= i %> as Controllers<%= i %>
  <% }) %>
} from './types.d<%= t.nodeNextResolutionExt.ts %>';
<% } else { %>
<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => { %>
import type { Controllers as Controllers<%= i %> } from "<%= t.segmentMeta[segment.segmentName].segmentImportPath %>";
<% }) %>
<% } %>
<% if (t.imports.validateOnClient) { %>
import { validateOnClient } from '<%= t.imports.validateOnClient %>';
<% } else { %>
const validateOnClient = undefined;
<% } %>
type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;
<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => {     
  Object.keys(segment.controllers).forEach((rpcModuleName) => { %>
export const <%= rpcModuleName %> = createRPC<Controllers<%= i %>["<%= rpcModuleName %>"], Options>(
  schema, '<%= segment.segmentName %>', '<%= rpcModuleName %>',
  { fetcher, validateOnClient, <%- typeof t.segmentMeta[segment.segmentName].segmentNameOverride === 'string' ? `segmentNameOverride: '${t.segmentMeta[segment.segmentName].segmentNameOverride}', ` : '' %>defaultOptions: { apiRoot: '<%= segment.segmentApiRoot ?? t.apiRoot %>' } }
);
<% }) 
}) %>
export { schema };