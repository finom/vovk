<%- t.getFirstLineBanner() %>
import type { VovkClientFetcher } from 'vovk';
import type { createRPC } from '<%= t.commonImports.module.createRPC %>';
<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => { if(segment.segmentType !== 'mixin') { %>
import type { Controllers as Controllers<%= i %> } from "<%= t.segmentMeta[segment.segmentName].segmentImportPath %>";
<% }}) %>
<% if (t.hasMixins) { %>
import type { Controllers as MixinControllers, Mixins } from "./mixins";
<% } %>

<% Object.values(t.schema.segments).filter((segment) => segment.emitSchema).forEach((segment, i) => { %>
  <% Object.entries(t.segmentMeta[segment.segmentName].reExports).forEach(([reExportWhat, reExportFrom]) => { %>
export { <%= reExportWhat %> } from '<%= reExportFrom %>';
  <% }) %>
  <% Object.keys(segment.controllers).forEach((rpcModuleName) => { %>
export const <%= rpcModuleName %>: ReturnType<typeof createRPC<<%= segment.segmentType === 'mixin' ? `MixinControllers` : `Controllers${i}` %>["<%= rpcModuleName %>"], typeof import('<%- t.segmentImports[segment.segmentName].module.fetcher %>').fetcher extends VovkClientFetcher<infer U> ? U : never>>;
  <% }) 
}) %>
export { schema } from './schema.cjs';
export { openapi } from './openapi.cjs';
<% if (t.hasMixins) { %>
export { Mixins };
<% } %>