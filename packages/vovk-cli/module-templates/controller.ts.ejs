<% const vars = { 
  ControllerName: t.TheThing + 'Controller',
  ServiceName: t.TheThing + 'Service',
}; %>
---
dir: <%= t.defaultDir %>
fileName: <%= vars.ControllerName + '.ts' %>
sourceName: <%= vars.ControllerName %>
compiledName: <%= t.TheThing + 'RPC' %>
---

import { prefix, get, put, post, del, type VovkRequest } from 'vovk';
<% if(t.withService) { %>
import <%= vars.ServiceName %> from './<%= vars.ServiceName %>';
<% } %>

@prefix('<%= t['the-things'] %>')
export default class <%= vars.ControllerName %> {
    @get()
    static get<%= t.TheThings %> = async (req: VovkRequest<null, { search: string }>) => {
        const search = req.nextUrl.searchParams.get('search');
        <% if(t.withService) { %>
        return <%= vars.ServiceName %>.get<%= t.TheThings %>(search);
        <% } else { %>
        return { results: [], search };
        <% } %>
    }

    @put(':id')
    static update<%= t.TheThing %> = async (req: VovkRequest<{ foo: 'bar' | 'baz' }, { q: string }>, params: { id: string }) => {
        const { id } = params;
        const body = await req.json();
        const q = req.nextUrl.searchParams.get('q');
        <% if(t.withService) { %>
        return <%= vars.ServiceName %>.update<%= t.TheThing %>(id, q, body);
        <% } else { %>
        return { id, body, q };
        <% } %>
    };

    @post()
    static create<%= t.TheThing %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= t.TheThing %> = () => {
        // ...
    };
}