---
imports: ['vovk-python-client']
---
<% const vars = {
    convertJSONSchemaToPythonType: t.imports['vovk-python-client'].convertJSONSchemaToPythonType,
}; %>
<%- `# auto-generated ${new Date().toISOString()}` %>
from __future__ import annotations  # Enables forward references in type hints
from typing import Any, Dict, List, Literal, Optional, Set, TypedDict, Union, Tuple, Generator # type: ignore
from .api_client import ApiClient, HttpException

HttpException = HttpException

client = ApiClient('<%= t.apiRoot %>')
<% Object.entries(t.fullSchema.segments).forEach(([segmentName, segment]) => {
    Object.values(segment.controllers).forEach(({ prefix, handlers, controllerName }) => { %>
class <%= controllerName %>: <% Object.entries(handlers).forEach(([handlerNameOriginal, { validation, openapi, path, httpMethod }]) => { 
    const handlerNameOriginalCapitalized = handlerNameOriginal.charAt(0).toUpperCase() + handlerNameOriginal.slice(1);
    const handlerName = t._.snakeCase(handlerNameOriginal); %>
    # <%= controllerName %>.<%= handlerName %> <%= httpMethod %> <%= t.apiRoot %>/<%= segmentName %>/<%= prefix %>/<%= path %>
<%- ([
        vars.convertJSONSchemaToPythonType({ schema: validation?.body, namespace: controllerName, className: `${handlerNameOriginalCapitalized}Body`, pad: 4 }),
        vars.convertJSONSchemaToPythonType({ schema: validation?.query, namespace: controllerName, className: `${handlerNameOriginalCapitalized}Query`, pad: 4 }),
        vars.convertJSONSchemaToPythonType({ schema: validation?.params, namespace: controllerName, className: `${handlerNameOriginalCapitalized}Params`, pad: 4 }),
        vars.convertJSONSchemaToPythonType({ schema: validation?.output, namespace: controllerName, className: `${handlerNameOriginalCapitalized}Output`, pad: 4 }),
        vars.convertJSONSchemaToPythonType({ schema: validation?.iteration, namespace: controllerName, className: `${handlerNameOriginalCapitalized}Iteration`, pad: 4 })
    ]).filter(Boolean).join('\n') %>
    @staticmethod
    def <%= handlerName %>(
<%= [
            validation?.body ? `body: ${controllerName}.${handlerNameOriginalCapitalized}Body,` : '', 
            validation?.query ? `query: ${controllerName}.${handlerNameOriginalCapitalized}Query,` : '', 
            validation?.params ? `params: ${controllerName}.${handlerNameOriginalCapitalized}Params,` : ''
        ].filter(Boolean).map((s) => ' '.repeat(8) + s).join('\n') %>
        api_root: Optional[str] = None,
        disable_client_validation: bool = False
    ) -> <%= validation?.output ? `${controllerName}.${handlerNameOriginalCapitalized}Output` : validation?.iteration ? `Generator[${controllerName}.${handlerNameOriginalCapitalized}Iteration, None, None]` : 'Any' %>:
        """ 
<%= ([
                openapi?.summary ?? 'No summary',
                openapi?.description ? `Description: ${openapi.description}` : '',
                validation?.body?.description ? `Body: ${validation?.body?.description}`: '',
                validation?.query?.description ? `Query: ${validation?.query?.description}`: '',
                validation?.output?.description ? `Returns: ${validation?.output?.description}`: ''
            ]).filter(Boolean).map((s) => ' '.repeat(8) + s).join('\n') %>
        """
        return client.request( # type: ignore
            segment_name='<%= segmentName %>',
            controller_name='<%= controllerName %>',
            handler_name='<%= handlerNameOriginal %>',
<%= [
                validation?.body ? 'body=body,' : '', 
                validation?.query ? 'query=query,' : '',
                validation?.params ? 'params=params,' : ''
            ].filter(Boolean).map((s) => ' '.repeat(12) + s).join('\n') %>
            api_root=api_root,
            disable_client_validation=disable_client_validation
        )
        <% }) %>
    <% }) %>
<% }) %>
