<% const vars = { 
  ModuleName: t.TheThing + 'Controller',
  ServiceName: t.TheThing + 'Service',
}; %>
---
outDir: <%= t.defaultOutDir %>
fileName: <%= vars.ModuleName + '.ts' %>
sourceName: <%= vars.ModuleName %>
compiledName: <%= t.TheThing + 'RPC' %>
---
import { prefix, get, put, post, del, operation } from 'vovk';
import { withDto } from 'vovk-dto';
import { IsString, IsIn } from 'class-validator';
<% if(t.withService) { %>
import <%= vars.ServiceName %> from './<%= vars.ServiceName %><%= t.nodeNextResolutionExt.ts %>';
<% } %>

class <%= t.TheThing %>BodyDto {
  @IsIn([true])
  todo: true;
}

class <%= t.TheThing %>ParamsDto {
  @IsString()
  id: string;
}

@prefix('<%= t['the-things'] %>')
export default class <%= vars.ModuleName %> {
    @operation({
      summary: 'Get <%= t.TheThings %>',
    })
    @get()
    static get<%= t.TheThings %> = withDto({
      handle() {
        <% if(t.withService) { %>
        return <%= vars.ServiceName %>.get<%= t.TheThings %>();
        <% } else { %>
        return { message: 'TODO: get <%= t.theThings %>' };
        <% } %>
      }
    });

    @operation({
      summary: 'Update <%= t.TheThing %>',
    })
    @put('{id}')
    static update<%= t.TheThing %> = withDto({
        body: <%= t.TheThing %>BodyDto,
        params: <%= t.TheThing %>ParamsDto,
        async handle(req, params: { id: string }) {
            const { id } = req.vovk.params();
            const body = await req.vovk.body();
            <% if(t.withService) { %>
            return <%= vars.ServiceName %>.update<%= t.TheThing %>(id, body);
            <% } else { %>
            return { message: `TODO: update <%= t.theThing %>`, id, body };
            <% } %>
        }
    });

    @post()
    static create<%= t.TheThing %> = withDto({
        body: <%= t.TheThing %>BodyDto,
        async handle(req) {
            const body = await req.vovk.body();
            <% if(t.withService) { %>
            return <%= vars.ServiceName %>.create<%= t.TheThing %>(body);
            <% } else { %>
            return { message: `TODO: create <%= t.theThing %>`, body };
            <% } %>
        }
    });

    @del('{id}')
    static delete<%= t.TheThing %> = withDto({
        params: <%= t.TheThing %>ParamsDto,
        handle(req, params) {
            const { id } = req.vovk.params();
            <% if(t.withService) { %>
            return <%= vars.ServiceName %>.delete<%= t.TheThing %>(id);
            <% } else { %>
            return { message: `TODO: delete <%= t.theThing %>`, id };
            <% } %>
        }
    });
}