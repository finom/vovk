---
imports: ['vovk-rust-client']
---
<% const vars = {
    convertJSONSchemaToRustType: t.imports['vovk-rust-client'].convertJSONSchemaToRustType,
}; %>
<%- `// auto-generated ${new Date().toISOString()}` %>
mod http_request;
mod read_full_schema;

<% Object.entries(t.fullSchema.segments).forEach(([segmentName, segment]) => {
    Object.values(segment.controllers).forEach(({ prefix, handlers, controllerName }) => { %>
pub mod <%= t._.snakeCase(controllerName) %> {
    pub use crate::http_request::{http_request, http_request_stream};
    pub use serde::{Deserialize, Serialize};
<% Object.entries(handlers).forEach(([handlerNameOriginal, { validation, openapi, path, httpMethod }]) => { 
    const handlerName = t._.snakeCase(handlerNameOriginal); 
    const handlerNameCapitalized = handlerNameOriginal.charAt(0).toUpperCase() + handlerNameOriginal.slice(1);
    %>
    // <%= controllerName %>.<%= handlerName %> <%= httpMethod %> <%= t.apiRoot %>/<%= segmentName %>/<%= prefix %>/<%= path %>
<%- ([
        vars.convertJSONSchemaToRustType({ schema: validation?.body, structName: `${handlerNameCapitalized}Body`, pad: 4 }),
        vars.convertJSONSchemaToRustType({ schema: validation?.query, structName: `${handlerNameCapitalized}Query`, pad: 4 }),
        vars.convertJSONSchemaToRustType({ schema: validation?.params, structName: `${handlerNameCapitalized}Params`, pad: 4 }),
        vars.convertJSONSchemaToRustType({ schema: validation?.output, structName: `${handlerNameCapitalized}Output`, pad: 4 }),
        vars.convertJSONSchemaToRustType({ schema: validation?.iteration, structName: `${handlerNameCapitalized}Iteration`, pad: 4 })
    ]).filter(Boolean).join('\n') %>
    /** 
<%= ([
                openapi?.summary ?? 'No summary',
                openapi?.description ? `Description: ${openapi.description}` : '',
                validation?.body?.description ? `Body: ${validation?.body?.description}`: '',
                validation?.query?.description ? `Query: ${validation?.query?.description}`: '',
                validation?.output?.description ? `Returns: ${validation?.output?.description}`: ''
            ]).filter(Boolean).map((s) => ' '.repeat(8) + s).join('\n') %>
    */
    pub fn <%= handlerName %>( 
        body: <%- validation?.body ? `${handlerNameCapitalized}Body` : '()' %>,
        query: <%- validation?.query ? `${handlerNameCapitalized}Query` : '()' %>,
        params: <%- validation?.params ? `${handlerNameCapitalized}Params` : '()' %>,
<%= /* [
            validation?.body ? `body: ${handlerNameCapitalized}Body,` : '', 
            validation?.query ? `query: ${handlerNameCapitalized}Query,` : '', 
            validation?.params ? `params: ${handlerNameCapitalized}Params,` : ''
        ].filter(Boolean).map((s) => ' '.repeat(8) + s).join('\n') */ %>
        api_root: Option<&str>,
        disable_client_validation: bool,
    ) -> <%- validation?.output ? `Result<${handlerNameCapitalized}Output, Box<dyn serde::ser::StdError>>` : validation?.iteration ? `Box<dyn Iterator<Item = ${handlerNameCapitalized}Iteration>>` : 'Result<serde_json::Value, Box<dyn serde::ser::StdError>>' %>{
        
        let result = <%= validation?.iteration ? 'http_request_stream' : 'http_request' %>::<
            <%- [
                validation?.output ? `${handlerNameCapitalized}Output` : validation?.iteration ? `${handlerNameCapitalized}Iteration` : 'serde_json::Value',
                validation?.body ? `${handlerNameCapitalized}Body` : '()',
                validation?.query ? `${handlerNameCapitalized}Query` : '()',
                validation?.params ? `${handlerNameCapitalized}Params` : '()'
            ].filter(Boolean).map((s) => ' '.repeat(12) + s).join(',\n') %>
        >(
            "<%= t.apiRoot %>",
            "<%= segmentName %>",
            "<%= controllerName %>",
            "<%= handlerNameOriginal %>",
            Some(&body),
            Some(&query),
            Some(&params),
<%= /*
    validation?.body ? 'Some(&body),' : 'None,',
    validation?.query ? 'Some(&query),' : 'None,',
    validation?.params ? 'Some(&params),' : 'None,',
].filter(Boolean).map((s) => ' '.repeat(12) + s).join('\n')  */ %>
            api_root,
            disable_client_validation,
        );

        result
    }
        <% }) %>
}
    <% }) %>

<% }) %>

