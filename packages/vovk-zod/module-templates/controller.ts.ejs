<% const vars = { 
  ControllerName: t.TheThing + 'Controller',
  ServiceName: t.TheThing + 'Service',
}; %>
---
dir: <%= t.defaultDir %>
fileName: <%= vars.ControllerName + '.ts' %>
sourceName: <%= vars.ControllerName %>
compiledName: <%= t.TheThing + 'RPC' %>
---

import { prefix, get, put, post, del } from 'vovk';
import { withZod } from 'vovk-zod';
import { z } from 'zod';
<% if(t.withService) { %>
import <%= vars.ServiceName %> from './<%= vars.ServiceName %>';
<% } %>

@prefix('<%= t['the-things'] %>')
export default class <%= vars.ControllerName %> {
    @get()
    static get<%= t.TheThings %> = withZod({
        query: z.object({ search: z.string() }), 
        handle(req) {
            const search = req.nextUrl.searchParams.get('search');
            <% if(t.withService) { %>
            return <%= vars.ServiceName %>.get<%= t.TheThings %>(search);
            <% } else { %>
            return { results: [], search };
            <% } %>
        }
    });

    @put(':id')
    static update<%= t.TheThing %> = withZod({
        body: z.object({
          foo: z.union([z.literal('bar'), z.literal('baz')]),
        }),
        query: z.object({ q: z.string() }),
        params: z.object({ id: z.string() }),
        async handle(req, params) {
            const { id } = params;
            const body = await req.json();
            const q = req.nextUrl.searchParams.get('q');
            <% if(t.withService) { %>
            return <%= vars.ServiceName %>.update<%= t.TheThing %>(id, q, body);
            <% } else { %>
            return { id, body, q };
            <% } %>
        }
    });

    @post()
    static create<%= t.TheThing %> = () => {
        // ...
    };

    @del(':id')
    static delete<%= t.TheThing %> = () => {
        // ...
    };
}