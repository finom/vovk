{"version":3,"file":"CommonController.js","sourceRoot":"","sources":["CommonController.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,UAAU,EAAuC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AACzG,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAI5B,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAE5B,AAAP,MAAM,CAAC,2BAA2B;QAChC,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/C,CAAC;IAGM,AAAP,MAAM,CAAC,0BAA0B;QAC/B,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC5B,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,sCAAsC;QACjD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC/C,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,qCAAqC;QAChD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC3C,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,iCAAiC;QAC5C,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACzD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC5B,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,oBAAoB;QAC/B,MAAM,UAAU,GAAG,MAAM,OAAO,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAGM,AAAP,MAAM,CAAC,kBAAkB;QACvB,OAAO,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC9B,CAAC;IAIM,AADP,6DAA6D;IAC7D,MAAM,CAAC,4BAA4B,CAAC,IAAiB;QACnD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC5B,CAAC;IAGM,AAAP,MAAM,CAAC,aAAa,CAAC,IAA4B,EAAE,EAAE,KAAK,EAAsB;QAC9E,OAAO,EAAE,KAAK,EAAE,CAAC;IACnB,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,WAAW,CACtB,GAAsE,EACtE,MAA0B;QAE1B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,MAAM,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAE1E,qCAAqC;QACrC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC9C,GAAgC,CAAC;YACjC,KAA4B,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,kCAAkC;QAClC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,EAAiD,CAAC;QAC/E,oCAAoC;QACpC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,EAA2C,CAAC;QAE3E,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,gBAAgB,EAAE,EAAE,CAAC;IACvD,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAC3C,GAGC;QAED,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAC/B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAoC,CAAC;QAE/D,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpB,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAEnC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;IAC3C,CAAC;IAGM,AAAP,MAAM,CAAC,cAAc,CAAC,GAAwD;QAC5E,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;IACrF,CAAC;IAGY,AAAb,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,GAA0B;QAClE,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAsB,CAAC;QAC3D,OAAO,QAAQ,CAAC;IAClB,CAAC;IAGM,AAAP,MAAM,CAAC,gBAAgB;QACrB,MAAM,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,kBAAkB,EAAE,EAAE,QAAQ,EAAE,mBAAmB,EAAE,CAAC,CAAC;IACzG,CAAC;IAGM,AAAP,MAAM,CAAC,mBAAmB;QACxB,OAAO,IAAI,QAAQ,CAAC,oBAAoB,EAAE;YACxC,OAAO,EAAE;gBACP,cAAc,EAAE,YAAY;aAC7B;SACF,CAAC,CAAC;IACL,CAAC;IAGM,AAAP,MAAM,CAAC,gBAAgB;QACrB,OAAO,IAAI,QAAQ,CAAC,0CAA0C,EAAE;YAC9D,OAAO,EAAE;gBACP,cAAc,EAAE,mBAAmB;aACpC;SACF,CAEC,CAAC;IACL,CAAC;IAGM,AAAP,MAAM,CAAC,oBAAoB;QACzB,OAAO,IAAI,QAAQ,CAAC,0CAA0C,EAAE;YAC9D,OAAO,EAAE;gBACP,cAAc,EAAE,YAAY;aAC7B;SACF,CAEC,CAAC;IACL,CAAC;CACF,CAAA;AA3IQ;IADN,GAAG,CAAC,IAAI,EAAE;;;;yDAGV;AAGM;IADN,GAAG,CAAC,IAAI,EAAE;;;;wDAGV;AAGY;IADZ,GAAG,CAAC,IAAI,EAAE;;;;oEAIV;AAGY;IADZ,GAAG,CAAC,IAAI,EAAE;;;;mEAIV;AAGY;IADZ,GAAG,CAAC,IAAI,EAAE;;;;+DAIV;AAGY;IADZ,GAAG,CAAC,IAAI,EAAE;;;;kDAKV;AAGM;IADN,GAAG,CAAC,IAAI,EAAE;;;;gDAGV;AAIM;IAFN,GAAG,CAAC,IAAI,EAAE;IACX,6DAA6D;;;;;0DAG5D;AAGM;IADN,GAAG,CAAC,oBAAoB,CAAC;;;;2CAGzB;AAGY;IADZ,IAAI,CAAC,iBAAiB,CAAC;;;;yCAoBvB;AAGY;IADZ,IAAI,CAAC,yBAAyB,CAAC;;;;8DAmB/B;AAGM;IADN,GAAG,CAAC,cAAc,CAAC;;;;4CAGnB;AAGY;IADZ,IAAI,CAAC,WAAW,CAAC;;;;0DAIjB;AAGM;IADN,GAAG,CAAC,OAAO,CAAC;;;;8CAGZ;AAGM;IADN,GAAG,CAAC,WAAW,CAAC;;;;iDAOhB;AAGM;IADN,GAAG,CAAC,OAAO,CAAC;;;;8CASZ;AAGM;IADN,GAAG,CAAC,YAAY,CAAC;;;;kDASjB;AA5IkB,gBAAgB;IADpC,MAAM,CAAC,QAAQ,CAAC;GACI,gBAAgB,CA6IpC;eA7IoB,gBAAgB","sourcesContent":["import { headers } from 'next/headers';\nimport { HttpException, HttpStatus, JSONLinesResponse, type VovkRequest, get, post, prefix } from 'vovk';\nimport { NextResponse } from 'next/server';\nimport { NESTED_QUERY_EXAMPLE } from '../lib';\n\n@prefix('common')\nexport default class CommonController {\n  @get.auto()\n  static getHelloWorldResponseObject() {\n    return NextResponse.json({ hello: 'world' });\n  }\n\n  @get.auto()\n  static getHelloWorldObjectLiteral() {\n    return { hello: 'world' };\n  }\n\n  @get.auto()\n  static async getHelloWorldNextResponseObjectPromise() {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    return NextResponse.json({ hello: 'world' });\n  }\n\n  @get.auto()\n  static async getHelloWorldRawResponseObjectPromise() {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    return Response.json({ hello: 'world' });\n  }\n\n  @get.auto()\n  static async getHelloWorldObjectLiteralPromise() {\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    return { hello: 'world' };\n  }\n\n  @get.auto()\n  static async getHelloWorldHeaders() {\n    const headerList = await headers();\n    const hello = headerList.get('x-test');\n    return { hello };\n  }\n\n  @get.auto()\n  static getHelloWorldArray() {\n    return [{ hello: 'world' }];\n  }\n\n  @get.auto()\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static getHelloWorldAndEmptyGeneric(_req: VovkRequest) {\n    return { hello: 'world' };\n  }\n\n  @get('with-params/:hello')\n  static getWithParams(_req: VovkRequest<undefined>, { hello }: { hello: 'world' }) {\n    return { hello };\n  }\n\n  @post('with-all/:hello')\n  static async postWithAll(\n    req: VovkRequest<{ isBody: true }, { simpleQueryParam: 'queryValue' }>,\n    params: { hello: 'world' }\n  ) {\n    const body = await req.json();\n    const simpleQueryParam = req.nextUrl.searchParams.get('simpleQueryParam');\n\n    // check if forEach inferred properly\n    req.nextUrl.searchParams.forEach((value, key) => {\n      key satisfies 'simpleQueryParam';\n      value satisfies 'queryValue';\n    });\n\n    // check if keys inferred properly\n    req.nextUrl.searchParams.keys() satisfies IterableIterator<'simpleQueryParam'>;\n    // check if values inferred properly\n    req.nextUrl.searchParams.values() satisfies IterableIterator<'queryValue'>;\n\n    return { params, body, query: { simpleQueryParam } };\n  }\n\n  @post('with-all-using-req-vovk')\n  static async postWithBodyAndQueryUsingReqVovk(\n    req: VovkRequest<\n      { isBody: true },\n      { simpleQueryParam: 'queryValue'; array1: readonly ['foo']; array2: readonly ['bar', 'baz'] }\n    >\n  ) {\n    req.vovk.meta({ isMeta1: true });\n    req.vovk.meta({ isMeta2: true });\n\n    const body = await req.vovk.body();\n    const query = req.vovk.query();\n    const meta = req.vovk.meta<{ isMeta1: true; isMeta2: true }>();\n\n    req.vovk.meta(null);\n\n    const metaNulled = req.vovk.meta();\n\n    return { body, query, meta, metaNulled };\n  }\n\n  @get('nested-query')\n  static getNestedQuery(req: VovkRequest<undefined, typeof NESTED_QUERY_EXAMPLE>) {\n    return { query: req.vovk.query(), search: decodeURIComponent(req.nextUrl.search) };\n  }\n\n  @post('form-data')\n  static async postWithFormDataUsingReqVovk(req: VovkRequest<FormData>) {\n    const formData = await req.vovk.form<{ field: 'value' }>();\n    return formData;\n  }\n\n  @get('error')\n  static getErrorResponse() {\n    throw new HttpException(HttpStatus.BAD_REQUEST, 'This is an error', { theCause: 'This is the cause' });\n  }\n\n  @get('json-text')\n  static getJsonTextResponse() {\n    return new Response('{\"hello\": \"world\"}', {\n      headers: {\n        'Content-Type': 'text/plain',\n      },\n    });\n  }\n\n  @get('jsonl')\n  static getJsonlResponse() {\n    return new Response('{\"hello\": \"world1\"}\\n{\"hello\": \"world2\"}', {\n      headers: {\n        'Content-Type': 'application/jsonl',\n      },\n    }) as JSONLinesResponse<{\n      hello: string;\n    }>;\n  }\n\n  @get('jsonl-text')\n  static getJsonlTextResponse() {\n    return new Response('{\"hello\": \"world1\"}\\n{\"hello\": \"world2\"}', {\n      headers: {\n        'Content-Type': 'text/plain',\n      },\n    }) as JSONLinesResponse<{\n      hello: string;\n    }>;\n  }\n}\n"]}