{"version":3,"file":"lib.js","sourceRoot":"","sources":["lib.ts"],"names":[],"mappings":"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","sourcesContent":["import { ok } from 'node:assert';\nimport supertest from 'supertest';\nimport type { KnownAny } from 'vovk';\nimport { z } from 'zod';\nimport type { ComplainingModel } from './client/WithZodClientController.ts';\n\nexport const apiUrl = `http://localhost:${process.env.PORT}/api`;\n\nexport const request = supertest(apiUrl);\n\n// legacy workaround to mimic Jest API\nexport function expectPromise(f: () => Promise<unknown>) {\n  const promise = f();\n\n  const getError = async () => {\n    let error: Error | undefined;\n\n    try {\n      await promise;\n    } catch (e) {\n      error = e as Error;\n    }\n    if (!error) {\n      throw new Error('Expected error, got none');\n    }\n\n    return error;\n  };\n\n  return {\n    rejects: {\n      toThrow: async (reg?: RegExp) => {\n        const error = await getError();\n        ok(\n          reg ? reg.test(error?.message ?? 'NO MESSAGE') : error,\n          `Expected error to match ${reg}, got ${error?.message}`\n        );\n      },\n      toThrowError: async (cl: KnownAny) => {\n        const error = await getError();\n        ok(cl ? error instanceof cl : error, `Expected error to be instance of ${cl}, got ${error}`);\n      },\n    },\n  };\n}\n\nexport const NESTED_QUERY_EXAMPLE = {\n  x: 'xx',\n  y: ['yy', 'uu'],\n  z: {\n    f: 'x',\n    u: ['uu', 'xx'],\n    d: {\n      x: 'ee',\n      arrOfObjects: [\n        {\n          foo: 'bar',\n          nestedArr: ['one', 'two', 'three'],\n        },\n        {\n          foo: 'baz',\n          nestedObj: {\n            deepKey: 'deepValue',\n          },\n        },\n      ],\n    },\n  },\n};\n\n/**\n * Returns an object that follows the ComplaiingModel schema but violates exactly\n * one validation constraint specified by the key parameter.\n */\nexport function getComplainingObject(key: string | null) {\n  // Object that satisfies all validation requirements\n  const withoutViolations: z.infer<typeof ComplainingModel> = {\n    enum_value: 'a',\n    // Number validations\n    num_minimum: 10, // Valid: >= 0\n    num_maximum: 50, // Valid: <= 100\n    num_exclusiveMinimum: 10, // Valid: > 0\n    num_exclusiveMaximum: 50, // Valid: < 100\n    num_multipleOf: 15, // Valid: multiple of 5\n    num_int: 42, // Valid: integer\n    num_int32: 42, // Valid: 32-bit integer\n\n    // String validations\n    str_minLength: 'hello', // Valid: length >= 3\n    str_maxLength: 'not too long', // Valid: length <= 50\n    str_pattern: 'Hello', // Valid: matches /^[A-Z][a-z]*$/\n    str_email: 'example@example.com', // Valid: email format\n    str_url: 'https://example.com', // Valid: URL format\n    str_uuid: '123e4567-e89b-12d3-a456-426614174000', // Valid: UUID format\n    str_datetime: '2023-01-01T12:00:00Z', // Valid: ISO datetime\n\n    // Array validations\n    arr_minItems: ['item1', 'item2'], // Valid: at least 1 item\n    arr_maxItems: ['item1', 'item2', 'item3'], // Valid: max 10 items\n\n    // Object validations\n    obj_required: {\n      requiredField: 'present',\n      optionalField: 123,\n    },\n    obj_strict: {\n      knownField: 'known value',\n    },\n\n    // Logical compositions\n    logical_anyOf: 'str', // Valid: one of string, number, boolean\n    logical_allOf: { a: 'string value', b: 42 }, // Valid: has both a and b\n  };\n\n  if (key === null) {\n    // If key is null, return the object without any violations\n    return withoutViolations;\n  }\n\n  // Object that violates every validation requirement\n  const withViolations = {\n    enum_value: 'invalid', // Invalid: not in ['a', 'b', 'c']\n    // Number validations\n    num_minimum: -10, // Invalid: < 0\n    num_maximum: 200, // Invalid: > 100\n    num_exclusiveMinimum: 0, // Invalid: = 0 (not > 0)\n    num_exclusiveMaximum: 100, // Invalid: = 100 (not < 100)\n    num_multipleOf: 12, // Invalid: not a multiple of 5\n    num_int: 42.5, // Invalid: not an integer\n    num_int32: 4294967296, // Invalid: not a 32-bit integer (too large)\n\n    // String validations\n    str_minLength: 'hi', // Invalid: length < 3\n    str_maxLength: 'this is a very long string that exceeds the maximum length requirement of fifty characters', // Invalid: length > 50\n    str_pattern: 'hello', // Invalid: doesn't match /^[A-Z][a-z]*$/\n    str_email: 'not-an-email', // Invalid: not an email\n    str_url: 'not-a-url', // Invalid: not a URL\n    str_uuid: 'not-a-uuid', // Invalid: not a UUID\n    str_datetime: 'not-a-datetime', // Invalid: not an ISO datetime\n\n    // Array validations\n    arr_minItems: [], // Invalid: less than 1 item\n    arr_maxItems: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'], // Invalid: more than 10 items\n\n    // Object validations\n    obj_required: {\n      // Invalid: missing requiredField\n      optionalField: 456,\n    },\n    obj_strict: {\n      knownField: 'known value',\n      unknownField: 'unknown value', // Invalid: additional property not allowed\n    },\n\n    // Logical compositions\n    logical_anyOf: 'wrong_length', // Invalid: not a string of length <= 5, number, or boolean\n    logical_allOf: { a: 'string value' }, // Invalid: missing b property\n  };\n\n  // Return an object with all properties from withoutViolations except for the specified key,\n  // which comes from withViolations\n  return {\n    ...withoutViolations,\n    [key]: withViolations[key as 'num_int32'],\n  } as z.infer<typeof ComplainingModel>;\n}\n"]}