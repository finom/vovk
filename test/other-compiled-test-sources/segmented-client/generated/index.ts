// auto-generated by vovk-cli v0.0.1-draft.304 at 2025-08-01T13:04:46.426Z
import type { VovkClientFetcher } from 'vovk';
import { fetcher } from 'vovk';
import { createRPC } from 'vovk';
import { schema } from './schema.ts';

import type { Controllers as Controllers0 } from "../../../src/app/api/generated/[[...vovk]]/route.ts";

import { validateOnClient } from '../../../../packages/vovk-ajv/index.js';

type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;

     
  
export const NoValidationControllerOnlyEntityRPC = createRPC<Controllers0["NoValidationControllerOnlyEntityRPC"], Options>(
  schema, 'generated', 'NoValidationControllerOnlyEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const NoValidationControllerAndServiceEntityRPC = createRPC<Controllers0["NoValidationControllerAndServiceEntityRPC"], Options>(
  schema, 'generated', 'NoValidationControllerAndServiceEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const ZodControllerOnlyEntityRPC = createRPC<Controllers0["ZodControllerOnlyEntityRPC"], Options>(
  schema, 'generated', 'ZodControllerOnlyEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const ZodControllerAndServiceEntityRPC = createRPC<Controllers0["ZodControllerAndServiceEntityRPC"], Options>(
  schema, 'generated', 'ZodControllerAndServiceEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const YupControllerOnlyEntityRPC = createRPC<Controllers0["YupControllerOnlyEntityRPC"], Options>(
  schema, 'generated', 'YupControllerOnlyEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const YupControllerAndServiceEntityRPC = createRPC<Controllers0["YupControllerAndServiceEntityRPC"], Options>(
  schema, 'generated', 'YupControllerAndServiceEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const DtoControllerOnlyEntityRPC = createRPC<Controllers0["DtoControllerOnlyEntityRPC"], Options>(
  schema, 'generated', 'DtoControllerOnlyEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export const DtoControllerAndServiceEntityRPC = createRPC<Controllers0["DtoControllerAndServiceEntityRPC"], Options>(
  schema, 'generated', 'DtoControllerAndServiceEntityRPC', fetcher,
  { validateOnClient, apiRoot: 'http://localhost:3210/api' }
);

export { schema };
